generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(uuid())
  email            String        @unique
  verifiedEmail    Boolean       @default(false)
  password         String
  name             String
  salt             String
  phone            String
  identityDocument String        @unique
  gender           Gender
  userCollege      UserCollege?
}

model UserCollege {
  id                String         @id @default(uuid())
  role              UserRoles      @default(NORMAL)
  user              User           @relation(fields: [userId], references: [id])
  course            Course         @relation(fields: [courseId], references: [id])
  userId            String         @unique
  courseId          String
  studentNumber     String         @unique
  ownerEvents       Event[]        @relation(name: "event-owner")
  participantEvents Participant[]
  userDocument      UserDocument[]
}

model UserDocument {
  id            String           @id @default(uuid())
  userCollegeId String
  userCollege   UserCollege      @relation(fields: [userCollegeId], references: [id])
  url           String
  key           String
  isValid       Boolean          @default(false)
  type          UserDocumentType
}

model College {
  id           String   @id @default(uuid())
  name         String   @unique
  localization String[]
  courses      Course[]
  events       Event[]
}

model Course {
  id          String        @id @default(uuid())
  name        String
  time        CourseTime
  college     College       @relation(fields: [collegeId], references: [id])
  collegeId   String
  UserCollege UserCollege[]
}

model Event {
  id           String        @id @default(uuid())
  owner        UserCollege   @relation(fields: [ownerId], references: [id], name: "event-owner")
  aPoint       College       @relation(fields: [aPointId], references: [id])
  bPoint       String[]
  aPointId     String
  ownerId      String
  status       EventStatus   @default(CREATED)
  createdAt    DateTime      @default(now())
  participants Participant[]
  fromTo       FromTo
}

model Participant {
  id            String      @id @default(uuid())
  event         Event       @relation(fields: [eventId], references: [id])
  student       UserCollege @relation(fields: [userCollegeId], references: [id])
  createdAt     DateTime    @default(now())
  eventId       String
  userCollegeId String
  active        Boolean     @default(true)
}

enum Gender {
  MALE
  FEMALE
}

enum CourseTime {
  AM
  PM
}

enum EventStatus {
  CREATED
  WAITING_PARTICIPANTS
  IN_PROGRESS
  FINISHED
}

enum UserRoles {
  NORMAL
  ADMIN
}

enum FromTo {
  FROM_A_TO_B
  FROM_B_TO_A
}

enum UserDocumentType {
  IDENTITY_DOCUMENT_FRONT
  IDENTITY_DOCUMENT_BACK
  COLLEGE_DOCUMENT
  PHOTO
}
